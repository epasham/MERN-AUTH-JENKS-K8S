var TYPE = require('../../tokenizer').TYPE;
<<<<<<< HEAD
var rawMode = require('../node/Raw').mode;

var COMMA = TYPE.Comma;

// var( <ident> , <value>? )
=======

var IDENTIFIER = TYPE.Identifier;
var COMMA = TYPE.Comma;
var SEMICOLON = TYPE.Semicolon;
var HYPHENMINUS = TYPE.HyphenMinus;
var EXCLAMATIONMARK = TYPE.ExclamationMark;

// var '(' ident (',' <value>? )? ')'
>>>>>>> e547b3e77583be3c8de92b6c78317e2fb285a75a
module.exports = function() {
    var children = this.createList();

    this.scanner.skipSC();

<<<<<<< HEAD
    // NOTE: Don't check more than a first argument is an ident, rest checks are for lexer
    children.push(this.Identifier());
=======
    var identStart = this.scanner.tokenStart;

    this.scanner.eat(HYPHENMINUS);
    if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== HYPHENMINUS) {
        this.scanner.error('HyphenMinus is expected');
    }
    this.scanner.eat(IDENTIFIER);

    children.push({
        type: 'Identifier',
        loc: this.getLocation(identStart, this.scanner.tokenStart),
        name: this.scanner.substrToCursor(identStart)
    });
>>>>>>> e547b3e77583be3c8de92b6c78317e2fb285a75a

    this.scanner.skipSC();

    if (this.scanner.tokenType === COMMA) {
        children.push(this.Operator());
        children.push(this.parseCustomProperty
            ? this.Value(null)
<<<<<<< HEAD
            : this.Raw(this.scanner.tokenIndex, rawMode.exclamationMarkOrSemicolon, false)
=======
            : this.Raw(this.scanner.currentToken, EXCLAMATIONMARK, SEMICOLON, false, false)
>>>>>>> e547b3e77583be3c8de92b6c78317e2fb285a75a
        );
    }

    return children;
};
