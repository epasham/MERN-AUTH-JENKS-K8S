<<<<<<< HEAD
var consumeNumber = require('../../tokenizer/utils').consumeNumber;
var TYPE = require('../../tokenizer').TYPE;

var DIMENSION = TYPE.Dimension;

=======
var NUMBER = require('../../tokenizer').TYPE.Number;

// special reader for units to avoid adjoined IE hacks (i.e. '1px\9')
function readUnit(scanner) {
    var unit = scanner.getTokenValue();
    var backSlashPos = unit.indexOf('\\');

    if (backSlashPos > 0) {
        // patch token offset
        scanner.tokenStart += backSlashPos;

        // return part before backslash
        return unit.substring(0, backSlashPos);
    }

    // no backslash in unit name
    scanner.next();

    return unit;
}

// number ident
>>>>>>> e547b3e77583be3c8de92b6c78317e2fb285a75a
module.exports = {
    name: 'Dimension',
    structure: {
        value: String,
        unit: String
    },
    parse: function() {
        var start = this.scanner.tokenStart;
<<<<<<< HEAD
        var numberEnd = consumeNumber(this.scanner.source, start);

        this.eat(DIMENSION);
=======
        var value = this.scanner.consume(NUMBER);
        var unit = readUnit(this.scanner);
>>>>>>> e547b3e77583be3c8de92b6c78317e2fb285a75a

        return {
            type: 'Dimension',
            loc: this.getLocation(start, this.scanner.tokenStart),
<<<<<<< HEAD
            value: this.scanner.source.substring(start, numberEnd),
            unit: this.scanner.source.substring(numberEnd, this.scanner.tokenStart)
=======
            value: value,
            unit: unit
>>>>>>> e547b3e77583be3c8de92b6c78317e2fb285a75a
        };
    },
    generate: function(node) {
        this.chunk(node.value);
        this.chunk(node.unit);
    }
};
